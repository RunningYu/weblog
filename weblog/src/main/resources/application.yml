server:
  port: 6868

spring:
  profiles:
    active: dev
  thymeleaf:
    cache: false
    prefix: classpath:/templates
    mode: HTML
  datasource:
    url: xxxxxxxxx # 填写你的数据库url
    username: xxx  # 数据库用户名
    password: xxx  # 用户密码
    driver-class-name: com.mysql.cj.jdbc.Driver
  servlet:
    multipart:x
      max-file-size: 50MB     # 设置单个文件大小
      max-request-size: 50MB  # 设置单次请求文件的总大小

  #  mvc:
#    servlet:
#      load-on-startup: 1

  redis:
    host: xxxxxxxxx            # redis不住的服务器ip地址
    port: xxxx                 # redis 的端口号
    password: xxxxxx           # redis 的用户登录密码

  rabbitmq:
    host:               # RabbitMq部署在的服务器ip地址
    username:           # 用户名
    password:           # 密码
    virtual-host:       # 填写虚拟机名称
    listener:
      simple:
        prefetch: 1    #（设置preFetch这个值，可以控制预取消息的上限）每次只能获取一条消息，处理完成才能获取下一个消息
        acknowledge-mode: auto # none-关闭ack; manual-手动ack; auto-自动ack
        retry:  # 利用Spring的retry机制，在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列
          enabled: true  # 开启消费者失败重试
          initial-interval: 1000  # 初始的失败等待时长为1秒
          multiplier: 1 # 下次失败的等待时长倍数，下次等待时长 = multiplier * last - interval
          max-attempts: 3 # 最大重试次数
          stateless: false # true 无状态了; false 有状态。 如果业务中包含事务，这里改为false
    publisher-confirm-type: correlated   # 异步回调，定义 ConfirmCallback, MQ 返回结果时会回调这个ConfirmCallback  ( 推荐使用 correlated )
    publisher-returns: true
    template:
      mandatory: true   # 定义消息路由失败时的策略。true，则调用 ReturnCallback； false：则直接丢弃消息
      
mybatis:
  configuration:
    map-underscore-to-camel-case: true

minio:
  endpoint: xxxxxxxxxx:xxx     # 部署minio的服务器 ip+端口
  accessKey: minio                      
  secretKey: xxxxx             # 用户名
  bucket: xxxx                 # 创建的桶名

ES:
  url: xxxxxxxxxx:xxx      # Elasticsearch 部署的服务器 ip+端口